@page  "/sign"
@using Idfy.Blazor.DemoSite.Client.Components.Buttons;
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;
@using Services;
@using Idfy.Blazor.DemoSite.Client.Pages.Sign.Tabs;
@inject DocumentService DocumentService
@inject EnvironmentService EnvironmentService
@inject IUriHelper UriHelper
@inject HttpClient Http
@inject LocalStorage Storage


<MatProgressBar Closed="@loaded" Indeterminate="true"></MatProgressBar>
@if (loaded)
{
    <div class="d-flex align-items-center">

        <div id="create-doc-container" Class="app-container app-padding">
            <MatTabGroup>
                <MatTab Label="General">
                    <General></General>
                </MatTab>
                <MatTab Label="Files">
                    <Files></Files>
                </MatTab>
                <MatTab Label="Signers">
                    <Signers OnExecuteWithErrorHandler="@(t =>  ExecuteWithErrorHandling(async() => await t ))"></Signers>
                </MatTab>
                <MatTab Label="Advanced">
                    <Advanced></Advanced>
                </MatTab>
                <MatTab Label="Notifications">
                    <Notifications></Notifications>
                </MatTab>
            </MatTabGroup>


            @if (DocumentService.Document?.DocumentId != null && !DocumentService.Document.DocumentId.Equals(Guid.Empty))
            {
                <p>Currently viewing document with Id: @DocumentService.Document.DocumentId</p>

                <SuccessButton Icon="refresh" OnClick="args => Refresh(args)">Refresh</SuccessButton>

                <MatButton Raised="true" Icon="clear" OnClick="Clear">Clear</MatButton>
            }
            else
            {
                <SuccessButton Class="full-width" Icon="pets" OnClick="CreateDocument" TrailingIcon="pets">Create Document</SuccessButton>
            }

            <MatDialog @bind-IsOpen="@dialogIsOpen">
                <MatDialogTitle>An error occured</MatDialogTitle>
                <MatDialogContent>
                    <p>@error</p>
                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@CloseDialog">OK</MatButton>
                </MatDialogActions>
            </MatDialog>

        </div>

    </div>
}


@code {
    bool loaded = true;
    bool dialogIsOpen = false;
    string error = "";

    protected override async Task OnInitAsync()
    {
        var currentDoc = Storage["document"];
        var currentEnv = Storage["env"];

        if (!string.IsNullOrWhiteSpace(currentEnv))
            EnvironmentService.CurrentEnvironment = currentEnv;

        if (!string.IsNullOrWhiteSpace(currentDoc))
        {
            await this.Refresh(null, Guid.Parse(currentDoc), true);
        }

    }

    void CloseDialog()
    {
        dialogIsOpen = false;
    }

    protected async Task Clear(UIMouseEventArgs args)
    {
        await ExecuteWithErrorHandling(async () =>
        {
            loaded = false;
            await Task.Delay(500); //Just a temp workaround to reset view
            Storage.Clear();
            DocumentService.Init();
            loaded = true;
        });
    }

    protected async Task Refresh(UIMouseEventArgs args, Guid? documentId = null, bool clearCacheOnError = false)
    {
        await ExecuteWithErrorHandling(async () =>
        {
            await DocumentService.GetDocument(UriHelper.GetBaseUri(), documentId);
        }, clearCacheOnError);
    }

    protected async Task CreateDocument(UIMouseEventArgs args)
    {
        await ExecuteWithErrorHandling(async () =>
        {
            var result = await this.DocumentService.CreateDocument(UriHelper.GetBaseUri());
            DocumentService.Document = result;
            Storage["document"] = result.DocumentId.ToString();
            Storage["env"] = EnvironmentService.CurrentEnvironment;
        });

    }

    protected async Task ExecuteWithErrorHandling(Func<Task> func, bool clearCacheOnError = false)
    {
        try
        {
            this.error = "";
            loaded = false;
            await func.Invoke();
        }
        catch (IdfyException e)
        {
            this.error = $"{e.Error?.ErrorDescription}\n\n" +
                    $"{e.Message}\n\n" +
                    $"{e.Response?.ResponseJson}";
            this.dialogIsOpen = true;
        }
        catch (Exception e)
        {
            this.error = e.Message;
            this.dialogIsOpen = true;
        }
        finally
        {
            loaded = true;
        }

        if(!string.IsNullOrWhiteSpace(this.error) && clearCacheOnError)
        {
            Storage.Clear();
        }

    }
}
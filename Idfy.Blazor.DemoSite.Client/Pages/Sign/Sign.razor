@page  "/sign"
@using Idfy.Blazor.DemoSite.Client.Components.Buttons;
@using Services;
@using Idfy.Blazor.DemoSite.Client.Pages.Sign.Tabs;
@inject DocumentService DocumentService;
@inject EnvironmentService EnvironmentService;
@inject HttpClient Http;
@inject IJSRuntime JSRuntime;


<MatProgressBar Closed="@loaded" Indeterminate="true"></MatProgressBar>
@if (loaded)
{
<div class="d-flex align-items-center">
    @if (string.IsNullOrWhiteSpace(this.DocumentService.EditSigner))
    {
        <div id="create-doc-container" Class="app-container app-padding">
            <MatTabGroup>
                <MatTab Label="General">
                    <General OnExecuteWithErrorHandler="@(t =>  ExecuteWithErrorHandling(async() => await t ))"></General>
                </MatTab>
                <MatTab Label="Files">
                    <Files OnExecuteWithErrorHandler="@(t =>  ExecuteWithErrorHandling(async() => await t ))"></Files>
                </MatTab>
                <MatTab Label="Advanced">
                    <Advanced></Advanced>
                </MatTab>
                <MatTab Label="Notifications">
                    <Notifications></Notifications>
                </MatTab>
            </MatTabGroup>


            @if (DocumentService.Document?.DocumentId != null && !DocumentService.Document.DocumentId.Equals(Guid.Empty))
            {
                <p>Currently viewing document with Id: @DocumentService.Document.DocumentId</p>

                @if (DocumentService.Document.Status.DocumentStatus != Signature.DocumentStatus.Signed)
                {
                    <MatButton Class="btn-margin" Outlined="true" Icon="update" OnClick="UpdateDocument">Save Changes</MatButton>
                }
                <MatButton Class="btn-margin " Outlined="true" Icon="clear" OnClick="Clear">Reset form</MatButton>
                <AppButton Theme="Static.Themes.Success" Icon="pets" OnClick="CreateDocument">Create New</AppButton>
                <AppButton Theme="Static.Themes.Success" Icon="refresh" OnClick="@(() => Refresh(null, false))">Refresh</AppButton>
            }
            else
            {
                <AppButton Theme="Static.Themes.Success" Class="full-width" Icon="pets" OnClick="CreateDocument" TrailingIcon="pets">Create Document</AppButton>
            }

            <MatDialog @bind-IsOpen="@dialogIsOpen">
                <MatDialogTitle>An error occured</MatDialogTitle>
                <MatDialogContent>
                    <p>@error</p>
                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@CloseDialog">OK</MatButton>
                </MatDialogActions>
            </MatDialog>
        </div>
    }
    else
    {
        <Idfy.Blazor.DemoSite.Client.Pages.Sign.Tabs.Signer.Signer OnExecuteWithErrorHandler="@(t =>  ExecuteWithErrorHandling(async() => await t ))">
        </Idfy.Blazor.DemoSite.Client.Pages.Sign.Tabs.Signer.Signer>
    }

</div>
}


@code {
    bool loaded = false;
    bool dialogIsOpen = false;
    string error = "";

    protected override async Task OnInitializedAsync()
    {
        DocumentService.OnChange += this.StateHasChanged;

        var currentDoc = await JSRuntime.GetLocalStorage("document");
        var currentEnv = await JSRuntime.GetLocalStorage("env");

        if (!string.IsNullOrWhiteSpace(currentEnv))
            EnvironmentService.CurrentEnvironment = currentEnv;

        if (!string.IsNullOrWhiteSpace(currentDoc))
        {
            await this.Refresh(Guid.Parse(currentDoc), true);
        }
        else
        {
            loaded = true;
        }
    }

    void CloseDialog()
    {
        dialogIsOpen = false;
    }

    protected async Task Clear()
    {
        await ExecuteWithErrorHandling(async () =>
        {
            loaded = false;
            await JSRuntime.ClearLocalStorage();
            DocumentService.Init();
            this.StateHasChanged();
            loaded = true;
        });
    }

    protected async Task Refresh(Guid? documentId = null, bool clearCacheOnError = false)
    {
        await ExecuteWithErrorHandling(async () =>
        {
            await DocumentService.GetDocument(documentId);
        }, clearCacheOnError);
    }

    protected async Task UpdateDocument()
    {
        await ExecuteWithErrorHandling(async () =>
        {
            await DocumentService.UpdateDocument();
        });
    }

    protected async Task CreateDocument()
    {
        await ExecuteWithErrorHandling(async () =>
        {
            var result = await this.DocumentService.CreateDocument();
            DocumentService.Document = result;
            await JSRuntime.SetLocalStorage("document", result.DocumentId.ToString());
            await JSRuntime.SetLocalStorage("env", EnvironmentService.CurrentEnvironment);
        });

    }

    protected async Task ExecuteWithErrorHandling(Func<Task> func, bool clearCacheOnError = false)
    {
        try
        {
            this.error = "";
            loaded = false;
            await func.Invoke();
        }
        catch (IdfyException e)
        {
            this.error = $"{e.Error?.ErrorDescription}\n\n" +
                    $"{e.Message}\n\n" +
                    $"{e.Response?.ResponseJson}";
            this.dialogIsOpen = true;
        }
        catch (Exception e)
        {
            this.error = e.Message;
            this.dialogIsOpen = true;
        }
        finally
        {
            loaded = true;
        }

        if(!string.IsNullOrWhiteSpace(this.error) && clearCacheOnError)
        {
            await JSRuntime.ClearLocalStorage();
        }

    }
}
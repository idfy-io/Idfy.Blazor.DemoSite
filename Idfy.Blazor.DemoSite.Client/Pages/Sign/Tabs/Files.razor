@using Idfy.Blazor.DemoSite.Shared
@using Services;
@using Microsoft.JSInterop;

@inject DocumentService DocumentService;
@inject EnvironmentService EnvironmentService;
@inject IJSRuntime JsRuntime;
@inject IUriHelper UriHelper;



<div class="app-padding">
    <MatAccordion Multi="true">
        @foreach (var doc in DocumentService.Files)
        {
            <MatExpansionPanel>
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader> @doc.Title</MatExpansionPanelHeader>
                    <MatExpansionPanelSubHeader>
                        <MatIcon Icon="@(doc.Type == AttachmentType.Sign ? "create": "attach_file")"></MatIcon>
                    </MatExpansionPanelSubHeader>
                </MatExpansionPanelSummary>

                <MatExpansionPanelDetails>
                    <div class="mat-layout-grid">
                        <div class="mat-layout-grid-inner">
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-9"> Id: @doc.Id </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                                @if (Static.Helpers.IsEditable(DocumentService.Document))
                                {
                                    <MatButton Outlined="true" Icon="update" OnClick="@(args => UpdateFile(doc))">Save changes</MatButton>
                                }
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                                <MatTextField Class="full-width" @bind-Value="@doc.Title" Icon="title" Label="Title" Outlined="true"></MatTextField>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                                <MatTextField Class="full-width" @bind-Value="@doc.FileName" Icon="picture_as_pdf" Label="Filename" Outlined="true"></MatTextField>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                                <MatTextField @bind-Value="@doc.Description" Label="Description" TextArea="true" FullWidth="true"></MatTextField>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                                <MatSelect Label="Filetype" @bind-Value="@doc.StringType" Outlined="true">
                                    @foreach (AttachmentType attachmentType in Enum.GetValues(typeof(AttachmentType)))
                                    {
                                        <Option Value="@attachmentType.ToString()">@attachmentType.ToString()</Option>
                                    }
                                </MatSelect>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                                <MatSlideToggle @bind-Checked="@doc.ConvertToPdf"></MatSlideToggle> <span>Convert to pdf</span>
                            </div>

                            @if (DocumentService.Document?.Status?.DocumentStatus == null)
                            {
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                                    <input type="file" @onchange="@((x)=> UploadFile(doc))" id="fileUpload" />
                                </div>
                            }
                        </div>
                    </div>
                </MatExpansionPanelDetails>
            </MatExpansionPanel>
        }
    </MatAccordion>
    @if (DocumentService.Document.Status?.DocumentStatus == null)
    {
        <MatButton Class="full-width btn-margin" OnClick="@AddFile">Add new</MatButton>
    }

    @if (DocumentService.Document?.Status?.CompletedPackages != null)
    {
        <h3 class="app-title">@DocumentService.Document.Title - Download files</h3>
        <MatButton OnClick="@(args => Download(args, Idfy.Signature.FileFormat.Unsigned))" Class="btn-margin">@Idfy.Signature.FileFormat.Unsigned</MatButton>
        @foreach (var package in DocumentService.Document.Status.CompletedPackages)
        {
            <MatButton OnClick="@(args => Download(args, package))" Class="btn-margin">@package</MatButton>
        }
    }

    @if (DocumentService.Document?.Status?.AttachmentPackages != null)
    {
        @foreach (var attachment in DocumentService.Document.Status.AttachmentPackages)
        {
            var matchedFile = DocumentService.Files.FirstOrDefault(f => f.Id?.ToString() == attachment.Key);
            <h3 class="app-title">@matchedFile.Title - Download files</h3>
            <MatButton OnClick="@(args => Download(args, Idfy.Signature.FileFormat.Unsigned, Guid.Parse(attachment.Key)))" Class="btn-margin">@Idfy.Signature.FileFormat.Unsigned</MatButton>
            @foreach (var package in attachment.Value)
            {
                <MatButton OnClick="@(args => Download(args, package, Guid.Parse(attachment.Key)))" Class="btn-margin">@package</MatButton>
            }
        }

    }
</div>



@code {

    [Parameter]
    EventCallback<Task> OnExecuteWithErrorHandler { get; set; }

    protected void AddFile(UIMouseEventArgs evt)
    {
        DocumentService.Files.Add(DocumentService.DefaultTxtFile);
    }

    protected async Task UpdateFile(DemoFile demoFile)
    {
        await OnExecuteWithErrorHandler.InvokeAsync(DocumentService.UpdateAttachment(demoFile));
    }

    protected async Task Download(UIMouseEventArgs evt, Idfy.Signature.FileFormat fileFormat, Guid? documentItemId = null)
    {
        try
        {
            var url = $"{UriHelper.GetBaseUri()}api/Sign/{DocumentService.Document.DocumentId}/files?fileFormat={fileFormat}&env={EnvironmentService.CurrentEnvironment}";

            if (documentItemId != null)
                url += $"&documentItemId={documentItemId}";

            await JsRuntime.InvokeAsync<object>("open", url, "_blank");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
   

    async Task UploadFile(DemoFile file)
    {
        var data = await JsInterop.GetFileData(JsRuntime, "fileUpload");
        if(!string.IsNullOrWhiteSpace(data?.Content))
        {
            file.Data = data.Content;
            file.FileName = data.Name;
            file.ConvertToPdf = !data.Name.Contains("pdf") && !data.Name.Contains("xml");
        }
    }
}

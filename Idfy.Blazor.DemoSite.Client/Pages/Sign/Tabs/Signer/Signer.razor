@using Idfy.Blazor.DemoSite.Shared;
@using Services;
@using Static;
@using Idfy.Blazor.DemoSite.Client.Components.Buttons;
@inject IJSRuntime JsRuntime;
@inject DocumentService DocumentService;

    <div class="container">

        <AppButton Icon="home" Theme="Static.Themes.BlueIsh" OnClick="@(() => this.DocumentService.EditSigner = null)">Close signer edit</AppButton>
        <p>You are currently viewing / editing signer with ext. Id @SignerData?.ExternalSignerId</p>

        <MatCard>
            <div class="app-padding">
                @if (SignerData != null)
                {
                    @if (Helpers.IsEditable(DocumentService.Document))
                    {
                        <div class="mat-layout-grid">

                            <div class="mat-layout-grid-inner">
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">
                                    Id: @SignerData.Id
                                </div>                              
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                                    <MatButton Outlined="true" Class="full-width" OnClick="UpdateSigner">Save changes</MatButton>
                                </div>
                            </div>
                        </div>
                    }

                    <h3 class="app-title">Name</h3>
                    <div class="mat-layout-grid">
                        <div class="mat-layout-grid-inner">
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                                <MatTextField Icon="perm_identity" @bind-Value="@SignerData.SignerInfo.FirstName" Label="Firstname" Outlined="true"></MatTextField>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                                <MatTextField Icon="perm_identity" @bind-Value="@SignerData.SignerInfo.LastName" Label="Lastname" Outlined="true"></MatTextField>
                            </div>
                        </div>
                    </div>
                    <h3 class="app-title">Contact</h3>
                    <div class="mat-layout-grid">
                        <div class="mat-layout-grid-inner">
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                                <MatTextField Icon="email" @bind-Value="@SignerData.SignerInfo.Email" Label="Email" Outlined="true"></MatTextField>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                                <MatTextField Icon="language" @bind-Value="@SignerData.SignerInfo.Mobile.CountryCode" Label="Country code" Outlined="true"></MatTextField>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                                <MatTextField Icon="smartphone" @bind-Value="@SignerData.SignerInfo.Mobile.Number" Label="Number" Outlined="true"></MatTextField>
                            </div>
                        </div>
                    </div>

                    <SignatureMethods Signer="@SignerData"></SignatureMethods>
                    <RedirectSettings Signer="@SignerData"></RedirectSettings>
                    <SignerUi Signer="@SignerData"></SignerUi>
                    <AdvancedSignerOpts SignerData="@SignerData"></AdvancedSignerOpts>
                    <SignerExtras Signer="@SignerData"></SignerExtras>


                }
                else
                {
                    <p>Signer not found</p>
                }
            </div>
        </MatCard>
       
    </div>

@code {

    //  [Parameter]
    public DemoSigner SignerData { get; set; }

    [Parameter]
    public EventCallback<Task> OnExecuteWithErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.SignerData = this.DocumentService.Document.Signers.FirstOrDefault(s =>
        s.ExternalSignerId == DocumentService.EditSigner);
    }

    private async Task UpdateSigner()
    {
        await OnExecuteWithErrorHandler.InvokeAsync(Task.Run(async () =>
        {
            var result = await DocumentService.AddOrUpdateSigner(SignerData);
            SignerData = result;
        }));
    }

}

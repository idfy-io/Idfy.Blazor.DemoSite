@using Blazor.DemoSite.Shared;
@using Services;

@inject IJSRuntime JsRuntime;
@inject NavigationManager uriHelper;


@if (Signer.Links != null || Signer.Links.Any())
{
    <MatList>
        @foreach (var link in Signer.Links)
        {
            <MatListItem OnClick="@(() => DownloadResource(link.Href))">
                <MatListItemText>
                    <MatListItemPrimaryText>@link.Rel</MatListItemPrimaryText>
                    <MatListItemSecondaryText>
                        @(string.IsNullOrWhiteSpace(link.Error) ?
                          (string.IsNullOrWhiteSpace(link.Href) ? "Waiting for result" : "Completed, click to download!")
                          : link.Error)
                    </MatListItemSecondaryText>
                </MatListItemText>
            </MatListItem>
        }
    </MatList>

}
else
{
    <p>No data..</p>
}


@code {

    [Parameter]
    public DemoSigner Signer { get; set; }

    async Task DownloadResource(string uri)
    {

        var url = $"{uriHelper.BaseUri}api/Sign/DownloadResource?url={uri}";
        await JsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

}

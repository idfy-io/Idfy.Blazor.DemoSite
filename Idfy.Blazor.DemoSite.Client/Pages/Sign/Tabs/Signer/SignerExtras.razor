@using Idfy.Blazor.DemoSite.Shared;
@using Idfy.Signature;
@using Services;

@inject IJSRuntime JsRuntime;
@inject NavigationManager uriHelper;

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <Idfy.Blazor.DemoSite.Client.Components.Buttons.AppButton Theme="Static.Themes.BlueIsh" OnClick="@((args) => this.dialogOpen = true)">
                View / configure extra info and addons
            </Idfy.Blazor.DemoSite.Client.Components.Buttons.AppButton>
        </div>
    </div>
</div>


<MatDialog Class="large-dialog" @bind-IsOpen="@dialogOpen">
    <MatDialogContent Class="large-dialog-content">
        <h3>Extra info</h3>

        <div class="app-padding">
            <MatSelect Outlined="true" Class="full-width" HelperText="Pick a new extra info to order" Label="Add extra info" ValueChanged="AddExtraInfo">
                <MatOption Value=""></MatOption>
                @foreach (var type in ((ExtraInfoSignerType[])Enum.GetValues(typeof(ExtraInfoSignerType))).Where(e => Signer.ExtraInfo?.Types == null
            || !Signer.ExtraInfo.Types.Contains(e)))
                {
                <MatOption Value="@type.ToString()">@type.ToString()</MatOption>
                }
            </MatSelect>

            @if (Signer.ExtraInfo?.Types != null)
            {
            <p>Currently ordered</p>
            @foreach (var info in Signer.ExtraInfo.Types)
            {
                var subAndHref = GetSubtitleAndHref(info.ToString());
            <MatList>
                <MatListItem OnClick="@(() => DownloadResource(subAndHref.Item2))">
                    @if (string.IsNullOrWhiteSpace(subAndHref.Item2))
                    {
                        <MatIconButton Icon="@MatIconNames.Delete" OnClick="@(() => Signer.ExtraInfo.Types = 
                                                                              Signer.ExtraInfo.Types.Where(a => a != info).ToList())">

                        </MatIconButton>
                    }
                    <MatListItemText>
                        <MatListItemPrimaryText>@info.ToString()</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@subAndHref.Item1</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>
            </MatList>
            }
        }
        else
        {
            <p>Nothing is ordered here..</p>
        }
        </div>

        <h3>Addons</h3>

        <div class="app-padding">
            <MatSelect Class="full-width" Outlined="true" HelperText="Pick a new addon to order" Label="Ïnclude addons" ValueChanged="IncludeAddon">
                <MatOption Value=""></MatOption>
                @foreach (var type in ((AddonSignerType[])Enum.GetValues(typeof(AddonSignerType))).Where(e => Signer.Addons?.Types == null
            || !Signer.Addons.Types.Contains(e)))
                {
                <MatOption Value="@type.ToString()">@type.ToString()</MatOption>
                }
            </MatSelect>
            @if (Signer.Addons?.Types != null)
        {
            <p>Currently ordered</p>

            @foreach (var addon in Signer.Addons.Types)
            {
                var subAndHref = GetSubtitleAndHref(addon.ToString());
            <MatList>
                <MatListItem OnClick="@(() => DownloadResource(subAndHref.Item2))">
                    @if (string.IsNullOrWhiteSpace(subAndHref.Item2))
                    {
                        <MatIconButton Icon="@MatIconNames.Delete" OnClick="@(() => Signer.Addons.Types = 
                                                                              Signer.Addons.Types.Where(a => a != addon).ToList())">

                        </MatIconButton>
                    }
                    <MatListItemText>
                        <MatListItemPrimaryText>@addon.ToString()</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@subAndHref.Item1</MatListItemSecondaryText>
                    </MatListItemText>
                </MatListItem>
            </MatList>
            }
        }
        else
        {
            <p>Nothing is ordered here..</p>
        }
        </div>


    </MatDialogContent>
    <MatDialogActions>
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-10">
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                    <MatButton OnClick="@((args) => this.dialogOpen = false)">OK</MatButton>
                </div>
            </div>
        </div>
    </MatDialogActions>
</MatDialog>


@code {
    bool dialogOpen = false;
    [Parameter]
    public DemoSigner Signer { get; set; }


    (string, string) GetSubtitleAndHref(string type)
    {
        if (Signer.Links != null)
        {
            var match = Signer.Links.FirstOrDefault(l => l.Rel.Equals(type, StringComparison.InvariantCultureIgnoreCase));

            if (!string.IsNullOrWhiteSpace(match?.Href))
            {
                return ("Completed, click to download result!", match.Href);
            }
            if (!string.IsNullOrWhiteSpace(match?.Error))
            {
                return (match.Error, null);
            }
        }
        return ("Waiting for result..", null);
    }

    void AddExtraInfo(string value)
    {
        if (Signer.ExtraInfo?.Types == null)
        {
            Signer.ExtraInfo = new ExtraInfoSignerRequest()
            {
                Types = new List<ExtraInfoSignerType>()
            };
        }

        if (Enum.TryParse(value, out ExtraInfoSignerType result))
        {
            Signer.ExtraInfo.Types.Add(result);
        }
    }

    void IncludeAddon(string value)
    {
        if (Signer.Addons?.Types == null)
        {
            Signer.Addons = new AddonsSignerRequest()
            {
                Types = new List<AddonSignerType>()
            };
        }

        if (Enum.TryParse(value, out AddonSignerType result))
        {
            Signer.Addons.Types.Add(result);
        }
    }

    async Task DownloadResource(string uri)
    {
        if(string.IsNullOrWhiteSpace(uri)) return;

        var url = $"{uriHelper.BaseUri}api/Sign/DownloadResource?url={uri}";
        await JsRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}
